package model.Entities;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.Entity;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Feb 17 21:37:14 AST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmployeesEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        EmployeeId,
        FirstName,
        LastName,
        Email,
        PhoneNumber,
        HireDate,
        JobId,
        Salary,
        CommissionPct,
        ManagerId,
        DepartmentId,
        EmpStatus,
        Password,
        DepartmentName,
        FullName,
        RecordStatus,
        Employees,
        ManagerIdEmployees,
        Departments,
        Departments1,
        Jobs,
        JobHistory,
        EmployeeMinSalDep60;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int EMPLOYEEID = AttributesEnum.EmployeeId.index();
    public static final int FIRSTNAME = AttributesEnum.FirstName.index();
    public static final int LASTNAME = AttributesEnum.LastName.index();
    public static final int EMAIL = AttributesEnum.Email.index();
    public static final int PHONENUMBER = AttributesEnum.PhoneNumber.index();
    public static final int HIREDATE = AttributesEnum.HireDate.index();
    public static final int JOBID = AttributesEnum.JobId.index();
    public static final int SALARY = AttributesEnum.Salary.index();
    public static final int COMMISSIONPCT = AttributesEnum.CommissionPct.index();
    public static final int MANAGERID = AttributesEnum.ManagerId.index();
    public static final int DEPARTMENTID = AttributesEnum.DepartmentId.index();
    public static final int EMPSTATUS = AttributesEnum.EmpStatus.index();
    public static final int PASSWORD = AttributesEnum.Password.index();
    public static final int DEPARTMENTNAME = AttributesEnum.DepartmentName.index();
    public static final int FULLNAME = AttributesEnum.FullName.index();
    public static final int RECORDSTATUS = AttributesEnum.RecordStatus.index();
    public static final int EMPLOYEES = AttributesEnum.Employees.index();
    public static final int MANAGERIDEMPLOYEES = AttributesEnum.ManagerIdEmployees.index();
    public static final int DEPARTMENTS = AttributesEnum.Departments.index();
    public static final int DEPARTMENTS1 = AttributesEnum.Departments1.index();
    public static final int JOBS = AttributesEnum.Jobs.index();
    public static final int JOBHISTORY = AttributesEnum.JobHistory.index();
    public static final int EMPLOYEEMINSALDEP60 = AttributesEnum.EmployeeMinSalDep60.index();

    /**
     * This is the default constructor (do not remove).
     */
    public EmployeesEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.Entities.EmployeesEO");
    }


    /**
     * Gets the attribute value for EmployeeId, using the alias name EmployeeId.
     * @return the value of EmployeeId
     */
    public Number getEmployeeId() {
        return (Number) getAttributeInternal(EMPLOYEEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmployeeId.
     * @param value value to set the EmployeeId
     */
    public void setEmployeeId(Number value) {
        setAttributeInternal(EMPLOYEEID, value);
    }

    /**
     * Gets the attribute value for FirstName, using the alias name FirstName.
     * @return the value of FirstName
     */
    public String getFirstName() {
        return (String) getAttributeInternal(FIRSTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for FirstName.
     * @param value value to set the FirstName
     */
    public void setFirstName(String value) {
        setAttributeInternal(FIRSTNAME, value);
    }

    /**
     * Gets the attribute value for LastName, using the alias name LastName.
     * @return the value of LastName
     */
    public String getLastName() {
        return (String) getAttributeInternal(LASTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastName.
     * @param value value to set the LastName
     */
    public void setLastName(String value) {
        setAttributeInternal(LASTNAME, value);
    }

    /**
     * Gets the attribute value for Email, using the alias name Email.
     * @return the value of Email
     */
    public String getEmail() {
        return (String) getAttributeInternal(EMAIL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Email.
     * @param value value to set the Email
     */
    public void setEmail(String value) {
        setAttributeInternal(EMAIL, value);
    }

    /**
     * Gets the attribute value for PhoneNumber, using the alias name PhoneNumber.
     * @return the value of PhoneNumber
     */
    public String getPhoneNumber() {
        return (String) getAttributeInternal(PHONENUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for PhoneNumber.
     * @param value value to set the PhoneNumber
     */
    public void setPhoneNumber(String value) {
        setAttributeInternal(PHONENUMBER, value);
    }

    /**
     * Gets the attribute value for HireDate, using the alias name HireDate.
     * @return the value of HireDate
     */
    public Date getHireDate() {
        return (Date) getAttributeInternal(HIREDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for HireDate.
     * @param value value to set the HireDate
     */
    public void setHireDate(Date value) {
        setAttributeInternal(HIREDATE, value);
    }

    /**
     * Gets the attribute value for JobId, using the alias name JobId.
     * @return the value of JobId
     */
    public String getJobId() {
        return (String) getAttributeInternal(JOBID);
    }

    /**
     * Sets <code>value</code> as the attribute value for JobId.
     * @param value value to set the JobId
     */
    public void setJobId(String value) {
        setAttributeInternal(JOBID, value);
    }

    /**
     * Gets the attribute value for Salary, using the alias name Salary.
     * @return the value of Salary
     */
    public Number getSalary() {
        return (Number) getAttributeInternal(SALARY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Salary.
     * @param value value to set the Salary
     */
    public void setSalary(Number value) {
        setAttributeInternal(SALARY, value);
    }

    /**
     * Gets the attribute value for CommissionPct, using the alias name CommissionPct.
     * @return the value of CommissionPct
     */
    public Number getCommissionPct() {
        return (Number) getAttributeInternal(COMMISSIONPCT);
    }

    /**
     * Sets <code>value</code> as the attribute value for CommissionPct.
     * @param value value to set the CommissionPct
     */
    public void setCommissionPct(Number value) {
        setAttributeInternal(COMMISSIONPCT, value);
    }

    /**
     * Gets the attribute value for ManagerId, using the alias name ManagerId.
     * @return the value of ManagerId
     */
    public Number getManagerId() {
        return (Number) getAttributeInternal(MANAGERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ManagerId.
     * @param value value to set the ManagerId
     */
    public void setManagerId(Number value) {
        setAttributeInternal(MANAGERID, value);
    }

    /**
     * Gets the attribute value for DepartmentId, using the alias name DepartmentId.
     * @return the value of DepartmentId
     */
    public Number getDepartmentId() {
        return (Number) getAttributeInternal(DEPARTMENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepartmentId.
     * @param value value to set the DepartmentId
     */
    public void setDepartmentId(Number value) {
       // setAttributeInternal(DEPARTMENTID, value);
        
        if (value != null & value.equals(new Number(60))) {
            RowSet rowSet = getEmployeeMinSalDep60();
            Row row = rowSet.first();
            if (row != null) {
                oracle.jbo.domain.Number salValue = (Number) row.getAttribute("MinSal");
                System.out.println("XXXXXXXXXXXXXXXXXXXXX" + salValue);
                setSalary(salValue);
            }
        }
        setAttributeInternal(DEPARTMENTID, value);
    }

    private String recordStatusValue(byte b) {
        String result = "";
        System.out.println("VALUE OF B" + b);
        switch (b) {
        case EntityImpl.STATUS_INITIALIZED:
            {
                result = "Initialized";
                System.out.println("VALUE OF B >>> STATUS_INITIALIZED" + b);

                break;
            }
        case EntityImpl.STATUS_MODIFIED:
            {
                result = "Modified";
                System.out.println("VALUE OF B >>> STATUS_MODIFIED" + b);

                break;
            }
        case EntityImpl.STATUS_NEW:
            {
                result = "New";
                System.out.println("VALUE OF B >>> STATUS_NEW" + b);

                break;
            }
        case EntityImpl.STATUS_DELETED:
            {
                result = "Deleted";
                System.out.println("VALUE OF B >>> STATUS_DELETED" + b);

                break;
            }
        case EntityImpl.STATUS_UNMODIFIED:
            {
                result = "Updated";
                System.out.println("VALUE OF B >>> STATUS_DELETED >>>" + b);

                break;
            }

        }

        return result;

    }


    /**
     * Gets the attribute value for EmpStatus, using the alias name EmpStatus.
     * @return the value of EmpStatus
     */
    public Number getEmpStatus() {
        return (Number) getAttributeInternal(EMPSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpStatus.
     * @param value value to set the EmpStatus
     */
    public void setEmpStatus(Number value) {
        System.out.println("Inside setEmpStatus");

        setAttributeInternal(EMPSTATUS, value);
    }

    /**
     * Gets the attribute value for Password, using the alias name Password.
     * @return the value of Password
     */
    public String getPassword() {
        return (String) getAttributeInternal(PASSWORD);
    }

    /**
     * Sets <code>value</code> as the attribute value for Password.
     * @param value value to set the Password
     */
    public void setPassword(String value) {
        setAttributeInternal(PASSWORD, value);
    }

    /**
     * Gets the attribute value for DepartmentName, using the alias name DepartmentName.
     * @return the value of DepartmentName
     */
    public String getDepartmentName() {
       // return (String) getAttributeInternal(DEPARTMENTNAME);
        String depName = "";
        EntityImpl depImpl = getDepartments1();
        if (depImpl != null) {
            depName = (String) depImpl.getAttribute("DepartmentName");
        }
        return depName;

    }

    /**
     * Sets <code>value</code> as the attribute value for DepartmentName.
     * @param value value to set the DepartmentName
     */
    public void setDepartmentName(String value) {
        setAttributeInternal(DEPARTMENTNAME, value);
    }

    /**
     * Gets the attribute value for FullName, using the alias name FullName.
     * @return the value of FullName
     */
    public String getFullName() {
       // return (String) getAttributeInternal(FULLNAME);
        String FName = getFirstName() + " " + getLastName();
        //   populateAttribute(FULLNAME, FName);
        return FName;

    }

    /**
     * Sets <code>value</code> as the attribute value for FullName.
     * @param value value to set the FullName
     */
    public void setFullName(String value) {
        setAttributeInternal(FULLNAME, value);
    }

    /**
     * Gets the attribute value for RecordStatus, using the alias name RecordStatus.
     * @return the value of RecordStatus
     */
    public String getRecordStatus() {
       // return (String) getAttributeInternal(RECORDSTATUS);
        String statusVal = recordStatusValue(getEntityState());
        System.out.println("XXXXXXXXXXXXXXXXXXXXXXXXXX"+statusVal + "----MMM >>>" + getEntityState());
        return statusVal;

    }

    /**
     * Sets <code>value</code> as the attribute value for RecordStatus.
     * @param value value to set the RecordStatus
     */
    public void setRecordStatus(String value) {
        setAttributeInternal(RECORDSTATUS, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getEmployees() {
        return (RowIterator) getAttributeInternal(EMPLOYEES);
    }

    /**
     * @return the associated entity EmployeesEOImpl.
     */
    public EmployeesEOImpl getManagerIdEmployees() {
        return (EmployeesEOImpl) getAttributeInternal(MANAGERIDEMPLOYEES);
    }

    /**
     * Sets <code>value</code> as the associated entity EmployeesEOImpl.
     */
    public void setManagerIdEmployees(EmployeesEOImpl value) {
        setAttributeInternal(MANAGERIDEMPLOYEES, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDepartments() {
        return (RowIterator) getAttributeInternal(DEPARTMENTS);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getDepartments1() {
        return (EntityImpl) getAttributeInternal(DEPARTMENTS1);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setDepartments1(EntityImpl value) {
        setAttributeInternal(DEPARTMENTS1, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getJobs() {
        return (EntityImpl) getAttributeInternal(JOBS);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setJobs(EntityImpl value) {
        setAttributeInternal(JOBS, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getJobHistory() {
        return (RowIterator) getAttributeInternal(JOBHISTORY);
    }


    /**
     * Gets the view accessor <code>RowSet</code> EmployeeMinSalDep60_1.
     */
    public RowSet getEmployeeMinSalDep60() {
        return (RowSet) getAttributeInternal(EMPLOYEEMINSALDEP60);
    }


    /**
     * @param employeeId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number employeeId) {
        return new Key(new Object[] { employeeId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        System.out.println("Inside Remove Before Set");
        setEmpStatus(new Number(0));
        System.out.println("Inside Remove After Set");
        super.remove();
        System.out.println("Inside Remove After Remove");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        System.out.println("Inside Do DML > 1");
        if (operation == DML_DELETE) {
            System.out.println("Inside Do DML > 2");
            operation = DML_UPDATE;
            System.out.println("Inside Do DML > 3");

        }

        super.doDML(operation, e);
    }
}

