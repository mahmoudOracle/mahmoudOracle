package model.Views;

import model.Views.common.DepartmentsVORow;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Feb 23 04:58:41 AST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DepartmentsVORowImpl extends ViewRowImpl implements DepartmentsVORow {


    public static final int ENTITY_DEPARTMENTSEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        DepartmentId,
        DepartmentName,
        ManagerId,
        LocationId,
        Employees,
        JobHistory;
        private static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DEPARTMENTID = AttributesEnum.DepartmentId.index();
    public static final int DEPARTMENTNAME = AttributesEnum.DepartmentName.index();
    public static final int MANAGERID = AttributesEnum.ManagerId.index();
    public static final int LOCATIONID = AttributesEnum.LocationId.index();
    public static final int EMPLOYEES = AttributesEnum.Employees.index();
    public static final int JOBHISTORY = AttributesEnum.JobHistory.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DepartmentsVORowImpl() {
    }

    /**
     * Gets DepartmentsEO entity object.
     * @return the DepartmentsEO
     */
    public EntityImpl getDepartmentsEO() {
        return (EntityImpl) getEntity(ENTITY_DEPARTMENTSEO);
    }

    /**
     * Gets the attribute value for DEPARTMENT_ID using the alias name DepartmentId.
     * @return the DEPARTMENT_ID
     */
    public Number getDepartmentId() {
        return (Number) getAttributeInternal(DEPARTMENTID);
    }

    /**
     * Sets <code>value</code> as attribute value for DEPARTMENT_ID using the alias name DepartmentId.
     * @param value value to set the DEPARTMENT_ID
     */
    public void setDepartmentId(Number value) {
        setAttributeInternal(DEPARTMENTID, value);
    }

    /**
     * Gets the attribute value for DEPARTMENT_NAME using the alias name DepartmentName.
     * @return the DEPARTMENT_NAME
     */
    public String getDepartmentName() {
        return (String) getAttributeInternal(DEPARTMENTNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for DEPARTMENT_NAME using the alias name DepartmentName.
     * @param value value to set the DEPARTMENT_NAME
     */
    public void setDepartmentName(String value) {
        setAttributeInternal(DEPARTMENTNAME, value);
    }

    /**
     * Gets the attribute value for MANAGER_ID using the alias name ManagerId.
     * @return the MANAGER_ID
     */
    public Number getManagerId() {
        return (Number) getAttributeInternal(MANAGERID);
    }

    /**
     * Sets <code>value</code> as attribute value for MANAGER_ID using the alias name ManagerId.
     * @param value value to set the MANAGER_ID
     */
    public void setManagerId(Number value) {
        setAttributeInternal(MANAGERID, value);
    }

    /**
     * Gets the attribute value for LOCATION_ID using the alias name LocationId.
     * @return the LOCATION_ID
     */
    public Number getLocationId() {
        return (Number) getAttributeInternal(LOCATIONID);
    }

    /**
     * Sets <code>value</code> as attribute value for LOCATION_ID using the alias name LocationId.
     * @param value value to set the LOCATION_ID
     */
    public void setLocationId(Number value) {
        setAttributeInternal(LOCATIONID, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link Employees.
     */
    public RowIterator getEmployees() {
        return (RowIterator) getAttributeInternal(EMPLOYEES);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link JobHistory.
     */
    public RowIterator getJobHistory() {
        return (RowIterator) getAttributeInternal(JOBHISTORY);
    }
    
    public Number updateEmployeesSal(Number upd){
        RowSet empSet = (RowSet) getEmployees();
        int count = empSet.getRowCount();
        System.out.println("Number Of Rows In Emp Set is " + count);
        while (empSet.hasNext()) {
            Row empRow = empSet.next();
          empRow.setAttribute("Salary", upd);  ;
       }
     return new Number(count);   
    }

    public Number updateEmployeesSal1(Number upd) {
        RowIterator empIter =  getEmployees();
        int count = empIter.getRowCount();
        System.out.println("Number Of Rows In Emp Iterator is " + count);
        while (empIter.hasNext()) {
            Row empRow = empIter.next();
            empRow.setAttribute("Salary", upd);
            
        }
        return new Number(count);
    }

    public Number updateEmployeesSal2(Number upd) {
        RowIterator empIter = getEmployees();
        int count = empIter.getRowCount();
        System.out.println("Number Of Rows In Emp Iterator is " + count);
        while (empIter.hasNext()) {
            EmployeesVORowImpl empRow = (EmployeesVORowImpl) empIter.next();
            empRow.setSalary(upd);
           
        }
        return new Number(count);
    }

    public Number updateEmployeesSal3(Number upd) {
        RowIterator empIter = getEmployees();
        int count = empIter.getRowCount();
        System.out.println("Number Of Rows In Emp Iterator is " + count);
        while (empIter.hasNext()) {
            Row empRow = empIter.next();
            empRow.setAttribute("Salary", upd);
           
        }
        return new Number(count);
    }

    public Number updateEmployeesSal4(Number upd) {// tge same as in the explanations
        RowSet empSet = (RowSet) getEmployees();
        int count = empSet.getRowCount();
        System.out.println("Number Of Rows In Emp Set is " + count);
        while (empSet.hasNext()) {
            EmployeesVORowImpl empRow = (EmployeesVORowImpl) empSet.next();
            empRow.setAttribute("Salary", upd);
            
        }
        return new Number(count);
    }
    
    
}

